function initializeProfileValidations() {
  $('#edit-user-details').validate({
    rules: {
      'user[name]': { required: true },
      'user[surname]': { required: true },
      'user[email]': {
        required: true,
        email: true},
      'user[current_password]': { required: true },
      'user[password_confirmation]': {equalTo : "#user_password"}
    },
    messages: {
      'user[name]': I18n[window.gon.locale]['first_name'],
      'user[surname]': I18n[window.gon.locale]['surname'],
      'user[email]': {
          required: I18n[window.gon.locale]['email'],
          email: I18n[window.gon.locale]['valid_email']},
      'user[current_password]': I18n[window.gon.locale]['current_pass_required'],
      'user[password_confirmation]': I18n[window.gon.locale]['current_pass']
    },
    errorElement: "div",
    errorClass: "text-danger",
    errorId: "event_error",
    errorPlacement: function (error, element) {
      error.insertAfter(element);
      element.closest('div').addClass('has-error');
    },
    success: function (label) {
      label.closest('.form-group').removeClass('has-error').addClass('has-success');
    }
  });
};
function initializeTwitterEmailValidation() {
    $("#finish-signup-form").validate({
      rules: {
        'user[email]': {
          required: true,
          email: true,
          remote: "/check_email" },
        'user[email_confirmation]': {equalTo : "#user_email"}
      },
      messages: {
        'user[email]': {
          required: I18n[window.gon.locale]['email'],
          email: I18n[window.gon.locale]['valid_email'],
          remote: I18n[window.gon.locale]['existing_email'] },
        'user[email_confirmation]': I18n[window.gon.locale]['confirm_email']
      },
      errorElement: "div",
      errorClass: "text-danger",
      errorId: "event_error",
      errorPlacement: function (error, element) {
        error.insertAfter(element);
        element.closest('div').addClass('has-error');
      },
      success: function (label) {
        label.closest('.form-group').removeClass('has-error').addClass('has-success');
        label.next('.help-block').hide();
      }
    })
  };

function initializeRegistrationValidations() {
  $('#new_user').validate({
    rules: {
      'user[name]': {required: true},
      'user[surname]': {required: true},
      'user[email]': {
        required: true,
        email: true,
        remote: "/check_email" },
      'user[password]': {required: true},
      'user[password_confirmation]': {equalTo : "#user_password"}
    },
    messages: {
      'user[name]': I18n[window.gon.locale]['first_name'],
      'user[surname]': I18n[window.gon.locale]['surname'],
      'user[email]': {
        required: I18n[window.gon.locale]['email'],
        email: I18n[window.gon.locale]['valid_email'],
        remote: I18n[window.gon.locale]['existing_email'] },
      'user[password]':  I18n[window.gon.locale]['current_pass_required'],
      'user[password_confirmation]':  I18n[window.gon.locale]['current_pass']
    },
    errorElement: "div",
    errorClass: "text-danger",
    errorId: "event_error",
    errorPlacement: function (error, element) {
      error.insertAfter(element);
      element.closest('div').addClass('has-error');
    },
    success: function (label) {
      label.closest('.form-group').removeClass('has-error').addClass('has-success');
      label.next('.help-block').hide();
    }
  });
};

function my_profile_page() {
  return location.pathname.match(/profile/) != null;
};

function sign_up_page() {
  return location.pathname.match(/sign_up/) != null;
};

function finish_signup_page() {
  return location.pathname.match(/finish_signup/) != null;
};

$(document).ready(function() {
  if(finish_signup_page()){
    initializeTwitterEmailValidation();
  }

  if(sign_up_page()){
    initializeRegistrationValidations();
  }

  if(my_profile_page()){
    initializeProfileValidations();
  }
});
